#!/bin/bash
#
# Tiny Core Linux 3.4 target system builder for OLPC XO-1 and XO-1.5
# Copyright (C) 2011  James Cameron (quozl@laptop.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
set -e

# local defaults


# the block device to create the partition on
# (ignored if it does not exist)
DEVICE=/dev/disk/by-id/usb-DSE_Micro_Drive_0000000000002F-0:0-part1

# your wireless network
ESSID=


# option defaults

# use a local cache of upstream files on your build system
# (--no-cache turns this off and verifies cache against upstream)
CACHE=yes

# additional kernel options
# see http://wiki.tinycorelinux.com/tiki-index.php?page=Boot+Options
# fbcon=font:SUN12x22, the same console font as the OLPC builds
# superuser, boots to a root shell
# quiet, reduces verbosity during boot
# multivt, start multiple consoles
CMDLINE="fbcon=font:SUN12x22 superuser quiet multivt"

# support XO-1 and XO-1.5
C=yes  # XO-1
D=yes  # XO-1.5


# upstream versions

# the build from which to obtain matching kernel, modules and firmware
# (corresponds to an rsync module name on rsync://updates.laptop.org/)
C_BUILD=build-10.1.3_xo1-860
D_BUILD=build-10.1.3_xo1.5-860

# the kernel version string in that build
# see uname --release
C_KERNEL=2.6.31_xo1-20101216.1250.1.olpc.741a3e67d9e7bb8
D_KERNEL=2.6.31_xo1.5-20101216.1243.1.olpc.741a3e67d9e7bb8

# the wireless firmware blobs
C_WIRELESS=usb8388.bin
D_WIRELESS=sd8686.bin

# the tinycore variant; tinycore or microcore
VARIANT=microcore

# version of this script
VERSION=2011-01-18

# where to unpack the tinycore initrd tree
# (is not kept)
TREE=/tmp/${VARIANT}.tree.$$

# where to create the new tinycore initrd
# (is not kept)
INITRD=/tmp/${VARIANT}.gz.$$


function license {
    cat <<EOF
Tiny Core Linux target system builder for OLPC XO-1 and XO-1.5, ${VERSION}
Copyright (C) 2011  James Cameron (quozl@laptop.org)

This program comes with ABSOLUTELY NO WARRANTY; for details see source.
This is free software, and you are welcome to redistribute it under
certain conditions; see source for details.

EOF
}

function usage {
    cat <<EOF
mktinycorexo [options] [device]

device         optional block device to create boot partition on.
               (otherwise you must copy output/boot to a device yourself)

--no-cache     ignores the local cache previously built.
               (verifies cache against upstream)

--essid id     associate to a wireless network during boot.

--no-xo-1      disable XO-1 support

--no-xo-1.5    disable XO-1.5 support

--version      displays script version.

--license      displays license.

--help         displays this what you are looking at, mate.
EOF
}

# process options and arguments
while [ ! -z "${1}" ]; do
    case "${1}" in
	--xo-1)
	    shift
	    echo "--xo-1 deprecated, ignored, use --no-xo-1.5"
	    ;;
	--no-xo-1)
	    shift
	    C=no
	    ;;
	--no-xo-1.5)
	    shift
	    D=no
	    ;;
	--essid)
	    shift
	    ESSID=${1}
	    shift
	    ;;
	--no-cache)
	    shift
	    CACHE=no
	    ;;
	--help)
	    usage
	    exit 0
	    ;;
	--license)
	    license
	    exit 0
	    ;;
	--version)
	    echo ${VERSION}
	    exit 0
	    ;;
	*)
	    DEVICE=${1}
	    shift
	    if [ ! -e ${DEVICE} ]; then
		echo "mktinycorexo: no such device ${DEVICE}"
		exit 1
	    fi
    esac

done

license

# build the cache
mkdir -p cache
mkdir -p cache/boot
mkdir -p cache/lib/modules
mkdir -p cache/lib/firmware

if [ $CACHE = no ]; then
    echo "Ignoring cache."
fi

if [ $CACHE = no -o ! -e cache/${VARIANT}.gz ]; then
    echo -n "Downloading ${VARIANT} ... "
    rsync --archive --checksum --quiet rsync://distro.ibiblio.org/distros/tinycorelinux/3.x/release/distribution_files/${VARIANT}.gz cache/
    echo "ok"
fi

function get {
    CACHE=$1
    KERNEL=$2
    BUILD=$3
    WIRELESS=$4
    if [ $CACHE = no -o ! -e cache/boot/vmlinuz-${KERNEL} ]; then
        if [ -e /boot/vmlinuz-${KERNEL} ]; then
            echo -n "Copying kernel from this system ... "
            cp --archive /boot/vmlinuz-${KERNEL} cache/boot/
            echo "ok"
        else
            echo -n "Downloading kernel ... "
            rsync --archive --checksum rsync://updates.laptop.org/${BUILD}/root/boot/vmlinuz-${KERNEL} cache/boot/
            echo "ok"
        fi
    fi
    if [ $CACHE = no -o ! -e cache/lib/modules/${KERNEL} ]; then
        if [ -e /lib/modules/${KERNEL} ]; then
            echo -n "Copying modules from this system ... "
            cp --archive /lib/modules/${KERNEL} cache/lib/modules/
            echo "ok"
        else
            echo -n "Downloading kernel modules ... "
            rsync --archive --checksum rsync://updates.laptop.org/${BUILD}/root/lib/modules/${KERNEL} cache/lib/modules/
            echo "ok"
        fi
    fi
    if [ $CACHE = no -o ! -e cache/lib/firmware/${WIRELESS} ]; then
        if [ -e /lib/firmware/${WIRELESS} ]; then
            echo -n "Copying wireless firmware from this system ... "
            cp --archive /lib/firmware/${WIRELESS/.bin/*} cache/lib/firmware/
            echo "ok"
        else
            echo -n "Downloading wireless firmware ... "
            rsync --archive --checksum rsync://updates.laptop.org/${BUILD}/root/lib/firmware/${WIRELESS/.bin/*} cache/lib/firmware/
            echo "ok"
        fi
    fi
}

if [ $C = yes ]; then
    get ${CACHE} ${C_KERNEL} ${C_BUILD} ${C_WIRELESS}
fi
if [ $D = yes ]; then
    get ${CACHE} ${D_KERNEL} ${D_BUILD} ${D_WIRELESS}
fi

# unpack
echo -n "Unpacking initrd ... "
mkdir -p ${TREE}
zcat cache/${VARIANT}.gz | \
    (cd ${TREE} && cpio --extract --make-directories --quiet)
echo "ok"

# modify version
echo -n "Modifying initrd - version ... "
cat <<EOF >> ${TREE}/etc/motd
${VERSION} quozl@laptop.org

EOF
echo "ok"

# modify kernel
echo -n "Modifying initrd - replace kernel ... "
rm -rf ${TREE}/lib/modules/2.6.29.1-tinycore
if [ $C = yes ]; then
    cp -pr cache/lib/modules/${C_KERNEL} ${TREE}/lib/modules/
fi
if [ $D = yes ]; then
    cp -pr cache/lib/modules/${D_KERNEL} ${TREE}/lib/modules/
fi
cp -pr cache/lib/firmware ${TREE}/lib/
echo "ok"

function encapsulate {
    bin=${1}
    BIN=$(basename ${bin})

    # ignore if the binary is already present
    if [ -x bin/${BIN} -o -x sbin/${BIN} ]; then return; fi

    # make a wrapper
    cat > bin/${BIN} <<EOF
#!/bin/sh
LD_LIBRARY_PATH=/lib:/foreign /foreign/${BIN} \$*
EOF
    chmod +x bin/${BIN}

    # copy the binary and required libraries
    mkdir -p foreign
    cp -p ${bin} foreign/

    for lib in `ldd ${bin}|egrep -v "linux-gate|ld-linux"|awk '{print $3}'`; do
	LIB=$(basename ${lib})
	if [ -x foreign/${LIB} ]; then continue; fi
	if [ ! -x lib/${LIB} -a ! -x usr/lib/${LIB} ]; then
	    cp -p ${lib} foreign/
	fi
    done
}

# supply missing utilities from this system
echo -n "Modifying initrd - adding utilities ... "
for bin in /sbin/parted /sbin/sfdisk /sbin/iwconfig /sbin/iwlist \
           /sbin/iwpriv /bin/gtar /usr/bin/rsync; do
    if [ -x ${bin} ]; then
        (cd ${TREE} && encapsulate ${bin})
    fi
done
cp xo-{backup,repart,restore,server,revert} ${TREE}/usr/local/bin/
echo ""

# associate with wireless on boot
if [ ! -z "${ESSID}" ]; then
    echo iwconfig eth0 essid ${ESSID} >> ${TREE}/opt/bootlocal.sh
    # FIXME: on XO-1 delay until eth0 present
    echo "Modifying initrd - wireless essid ... ok"
fi

# pack
echo -n "Repacking initrd ... "
(cd ${TREE} && (find | cpio -o -H newc --quiet | gzip -2 > ${INITRD}) )
rm -rf ${TREE}
echo "ok"

# make the output filesystem tree
echo -n "Building output tree ... "
rm -rf output
mkdir -p output
mkdir -p output/boot

cp ${INITRD} output/boot/initrd.gz
if [ $C = yes ]; then
    cp cache/boot/vmlinuz-${C_KERNEL} output/boot/vmlinuz.C
fi
if [ $D = yes ]; then
    cp cache/boot/vmlinuz-${D_KERNEL} output/boot/vmlinuz.D
fi
echo "ok"

echo -n "Adding OpenFirmware boot script ... "
cat << EOF > output/boot/olpc.fth
\ olpc.fth
visible
.( -- Tiny Core Linux boot script for OpenFirmware    ) cr
.(    by quozl@laptop.org, ${VERSION}              -- ) cr cr
" model" " /" find-package drop get-package-property 2drop 1 " M" \$set-macro
" ${CMDLINE}" to boot-file
" last:\boot\initrd.gz" to ramdisk
" last:\boot\vmlinuz.\${M}" expand$ to boot-device
cr
boot
EOF

# cleanup
rm -f ${INITRD}
echo "ok"

# copy to drive
if [ -w ${DEVICE} ]; then
    echo -n "Copying to drive ... "
    mount ${DEVICE} /mnt
    rsync --archive --checksum output/boot /mnt/
    umount /mnt/
    echo "ok"
fi
