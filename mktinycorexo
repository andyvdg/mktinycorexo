#!/bin/bash
#
# Tiny Core Linux 2.8 target system builder for OLPC XO-1.5
# Copyright (C) 2010  James Cameron (quozl@laptop.org)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
set -e

# local defaults


# the block device to create the partition on
# (ignored if it does not exist)
DEVICE=/dev/disk/by-id/usb-DSE_Micro_Drive_0000000000002F-0:0-part1

# your wireless network
ESSID=


# option defaults

# use a local cache of upstream files on your build system
# (--no-cache turns this off and verifies cache against upstream)
CACHE=yes

# additional kernel options
# see http://wiki.tinycorelinux.com/tiki-index.php?page=Boot+Options
# fbcon=font:SUN12x22, the same console font as the OLPC builds
# superuser, boots to a root shell
# quiet, reduces verbosity during boot
CMDLINE="fbcon=font:SUN12x22 superuser quiet"


# upstream versions

# the build from which to obtain matching kernel, modules and firmware
# (corresponds to an rsync module name on rsync://updates.laptop.org/)
OLPC_OS_BUILD=build-10.2_xo1.5-108

# the kernel version string in that build
# see uname --release
OLPC_OS_KERNEL=2.6.31_xo1.5-20100108.1640.1.olpc.846ed3a

# the wireless firmware blob
OLPC_FW_WIRELESS=sd8686.bin

# the tinycore variant; tinycore or microcore
VARIANT=microcore

# version of this script
VERSION=2010-01-28

# where to unpack the tinycore initrd tree
# (is not kept)
TREE=/tmp/${VARIANT}.tree.$$

# where to create the new tinycore initrd
# (is not kept)
INITRD=/tmp/${VARIANT}.gz.$$


function license {
    cat <<EOF
Tiny Core Linux target system builder for OLPC XO-1.5, ${VERSION}
Copyright (C) 2010  James Cameron (quozl@laptop.org)

This program comes with ABSOLUTELY NO WARRANTY; for details see source.
This is free software, and you are welcome to redistribute it under
certain conditions; see source for details.

EOF
}

function usage {
    cat <<EOF
build [options] [device]

device         optional block device to create boot partition on.
               (otherwise you must copy output/boot to a device yourself)

--no-cache     ignores the local cache previously built.
               (verifies cache against upstream)

--essid id     associate to a wireless network during boot.

--version      displays script version.

--license      displays license.

--help         displays this what you are looking at, mate.
EOF
}

# process options and arguments
while [ ! -z "${1}" ]; do
    case "${1}" in
	--xo-1)
	    shift
	    OLPC_OS_BUILD=build-802
	    OLPC_OS_KERNEL=2.6.25-20090223.1.olpc.69098d87d56945c
	    OLPC_FW_WIRELESS=usb8388.bin
	    ;;
	--essid)
	    shift
	    ESSID=${1}
	    shift
	    ;;
	--no-cache)
	    shift
	    CACHE=no
	    ;;
	--help)
	    usage
	    exit 0
	    ;;
	--license)
	    license
	    exit 0
	    ;;
	--version)
	    echo ${VERSION}
	    exit 0
	    ;;
	*)
	    DEVICE=${1}
	    shift
	    if [ ! -e ${DEVICE} ]; then
		echo "build: no such device ${DEVICE}"
		exit 1
	    fi
    esac

done

license

# build the cache
mkdir -p cache
mkdir -p cache/boot
mkdir -p cache/lib/modules
mkdir -p cache/lib/firmware

if [ $CACHE = no ]; then
    echo "fetch"
fi

if [ $CACHE = no -o ! -e cache/${VARIANT}.gz ]; then
    rsync --archive --checksum --quiet rsync://distro.ibiblio.org/distros/tinycorelinux/2.x/release/distribution_files/${VARIANT}.gz cache/
fi

if [ $CACHE = no -o ! -e cache/boot/vmlinuz-${OLPC_OS_KERNEL} ]; then
    if [ -e /boot/vmlinuz-${OLPC_OS_KERNEL} ]; then
	echo "using kernel from this system"
	cp --archive /boot/vmlinuz-${OLPC_OS_KERNEL} cache/boot/
    fi

    rsync --archive --checksum rsync://updates.laptop.org/${OLPC_OS_BUILD}/root/boot/vmlinuz-${OLPC_OS_KERNEL} cache/boot/
fi

if [ $CACHE = no -o ! -e cache/lib/modules/${OLPC_OS_KERNEL} ]; then
    if [ -e /lib/modules/${OLPC_OS_KERNEL} ]; then
	echo "using modules from this system"
	cp --archive /lib/modules/${OLPC_OS_KERNEL} cache/lib/modules/
    fi

    rsync --archive --checksum rsync://updates.laptop.org/${OLPC_OS_BUILD}/root/lib/modules/${OLPC_OS_KERNEL} cache/lib/modules/
fi

if [ $CACHE = no -o ! -e cache/lib/firmware/${OLPC_FW_WIRELESS} ]; then
    if [ -e /lib/firmware/${OLPC_FW_WIRELESS} ]; then
	echo "using wireless firmware from this system"
	cp --archive /lib/firmware/${OLPC_FW_WIRELESS/.bin/*} cache/lib/firmware/
    fi

    rsync --archive --checksum rsync://updates.laptop.org/${OLPC_OS_BUILD}/root/lib/firmware/${OLPC_FW_WIRELESS/.bin/*} cache/lib/firmware/
fi

function encapsulate {
    bin=${1}
    BIN=$(basename ${bin})

    # ignore if the binary is already present
    if [ -x bin/${BIN} -o -x sbin/${BIN} ]; then return; fi

    # make a wrapper
    cat > bin/${BIN} <<EOF
#!/bin/sh
LD_LIBRARY_PATH=/lib:/foreign /foreign/${BIN} \$*
EOF
    chmod +x bin/${BIN}

    # copy the binary and required libraries
    mkdir -p foreign
    cp -p ${bin} foreign/

    for lib in `ldd ${bin}|egrep -v "linux-gate|ld-linux"|awk '{print $3}'`; do
	LIB=$(basename ${lib})
	if [ -x foreign/${LIB} ]; then continue; fi
	if [ ! -x lib/${LIB} -a ! -x usr/lib/${LIB} ]; then
	    cp -p ${lib} foreign/
	fi
    done
}

# unpack
echo "unpack"
mkdir -p ${TREE}
zcat cache/${VARIANT}.gz | \
    (cd ${TREE} && cpio --extract --make-directories --quiet)

# modify version
echo "modify - version"
cat <<EOF >> ${TREE}/etc/motd
${VERSION} quozl@laptop.org

EOF

# modify kernel
echo "modify - kernel"
rm -rf ${TREE}/lib/modules/2.6.29.1-tinycore
cp -pr cache/lib/modules/${OLPC_OS_KERNEL} ${TREE}/lib/modules/
cp -pr cache/lib/firmware ${TREE}/lib/

# supply missing utilities from this system
echo "modify - utilities"
for sbin in parted iwconfig iwlist iwpriv; do
    if [ -x /sbin/${sbin} ]; then
        (cd ${TREE} && encapsulate /sbin/${sbin})
    fi
done

# associate with wireless on boot
if [ ! -z "${ESSID}" ]; then
    echo "modify - wireless"
    echo iwconfig eth0 essid ${ESSID} >> ${TREE}/opt/bootlocal.sh
    # FIXME: on XO-1 delay until eth0 present
fi

# pack
echo "pack"
(cd ${TREE} && (find | cpio -o -H newc --quiet | gzip -2 > ${INITRD}) )
rm -rf ${TREE}

# make the output filesystem tree
echo "structure"
rm -rf output
mkdir -p output
mkdir -p output/boot

cp ${INITRD} output/boot/${VARIANT}.gz
cp cache/boot/vmlinuz-${OLPC_OS_KERNEL} output/boot/vmlinuz

cat << EOF > output/boot/olpc.fth
\ olpc.fth
setup-smbios
unfreeze
dcon-unfreeze
visible
.( -- Tiny Core Linux boot script for OpenFirmware    ) cr
.(    by quozl@laptop.org, ${VERSION}              -- ) cr cr
" ${CMDLINE}" to boot-file
" u:\boot\vmlinuz" to boot-device
" u:\boot\\${VARIANT}.gz" to ramdisk
boot
EOF

# cleanup
rm -f ${INITRD}

# copy to media
if [ -w ${DEVICE} ]; then
    echo "copy"
    mke2fs -q ${DEVICE}
    mount ${DEVICE} /mnt
    rsync --archive output/boot /mnt/
    umount /mnt/
fi
